name: "Build EUDSL"

on:
  workflow_dispatch:
    inputs:
      force_debug_with_tmate:
        type: boolean
        description: 'Run the build with tmate session'
        required: false
        default: false
      debug_with_tmate:
        type: boolean
        description: 'Run the build with a tmate session ONLY in case of failure'
        required: false
        default: false
  pull_request:
  merge_group:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "manylinux_x86_64"
            runs-on: "ubuntu-22.04"
            container: "quay.io/pypa/manylinux_2_28_x86_64"
            os: "almalinux"
          - name: "windows_x86_64"
            runs-on: "windows-2019"
            os: "windows"
          - name: "macos_arm64"
            runs-on: "macos-14"
            os: "macos"
          - name: "macos_x86_64"
            runs-on: "macos-13"
            os: "macos"

    runs-on: ${{ matrix.runs-on }}

    name: ${{ matrix.name }}

    defaults:
      run:
        shell: bash

    permissions:
      id-token: write
      contents: write

    env:
      # either the PR number or `branch-N` where N always increments
      cache-key: eudsl_${{ matrix.name }}_clang_${{ format('{0}-{1}', github.ref_name, github.run_number) }}

    container:
      image: ${{ matrix.container }}

    steps:
      - name: "Check out repository"
        uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - name: "Setup base"
        uses: ./.github/actions/setup_base
        id: setup_base
        with:
          cache-key: ${{ env.cache-key }}
          restore-key: "eudsl_${{ matrix.name }}_clang"
          os: ${{ matrix.os }}

      - name: "Download MLIR"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          export RELEASE_PREFIX="mlir_${{ matrix.name }}"
          RELEASE_URL=$(gh release view latest --json assets -q '.assets |= sort_by(.createdAt) | .assets | map(select(.name | contains(env.RELEASE_PREFIX))) | .[-1] | .url')
          curl -sLO $RELEASE_URL
          tar xf $RELEASE_PREFIX*.tar.gz

      - name: "Build eudsl-tblgen"
        id: build
        run: |
          export CMAKE_PREFIX_PATH="$PWD/llvm-install"
          export EUDSL_SRC_DIR="$PWD/projects/eudsl"
          export EUDSL_BUILD_DIR="$PWD/eudsl-build"
          export EUDSL_INSTALL_DIR="$PWD/eudsl-install"

          ccache -z
          cmake -GNinja \
                -S "$EUDSL_SRC_DIR" \
                -B "$EUDSL_BUILD_DIR" \
                -DCMAKE_BUILD_TYPE=Release \
                "-DCMAKE_PREFIX_PATH=$PWD/__w/eudsl/eudsl/llvm-install/llvm-install" \
                "-DCMAKE_INSTALL_PREFIX=$EUDSL_INSTALL_DIR"
          cmake --build "$EUDSL_BUILD_DIR" --target install
          ccache -s

          echo "*********************** SMOKE TEST *********************************"
          "$EUDSL_INSTALL_DIR/bin/eudsl-tblgen" --help
          echo "*********************** SMOKE TEST *********************************"

          SHA_SHORT=$(git rev-parse --short HEAD)
          tar -czf eudsl_tblgen_${{ matrix.name }}_$(date +'%Y%m%d')_$SHA_SHORT.tar.gz -C "$EUDSL_INSTALL_DIR" bin

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eudsl_${{ matrix.name }}_artifact
          path: eudsl-install/bin
          if-no-files-found: warn

      - name: Release current commit
        if: ${{ !cancelled() && github.event_name == 'push' && github.ref_name == 'main' }}
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "*.tar.gz"
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "latest"
          name: "latest"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true

      - name: "Save cache"
        uses: actions/cache/save@v3
        if: ${{ !cancelled() && github.event_name == 'push' && github.ref_name == 'main' }}
        with:
          path: ${{ steps.setup_base.outputs.cache-dir }}
          key: ${{ env.cache-key }}

      - name: "Setup tmate session"
        if: ${{ (failure() && inputs.debug_with_tmate) || inputs.force_debug_with_tmate }}
        uses: mxschmitt/action-tmate@v3.18
        with:
          limit-access-to-actor: true
          install-dependencies: ${{ startsWith(matrix.runs-on, 'macos') || startsWith(matrix.runs-on, 'windows') }}
